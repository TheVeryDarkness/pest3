#[doc = "This is a grammar test written by [Tomas Tauber](https://github.com/tomtau)."]
#[allow(
    dead_code,
    missing_docs,
    non_camel_case_types,
    clippy::upper_case_acronyms
)]
#[derive(Clone, Copy, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub enum Rule {
    EOI,
    r#string,
    r#insensitive,
    r#range,
    r#ident,
    r#pos_pred,
    r#neg_pred,
    r#double_neg_pred,
    r#sequence,
    r#sequence_trivia,
    r#sequence_trivia_mandatory,
    r#sequence_nested,
    r#choice,
    r#choice_trivia,
    r#choice_trivia_mandatory,
    r#choice_prefix,
    r#optional,
    r#optional_trivia,
    r#repeat,
    r#repeat_trivia,
    r#repeat_trivia_mandatory,
    r#repeat_once,
    r#repeat_once_trivia,
    r#repeat_once_trivia_mandatory,
    r#repeat_min_max,
    r#repeat_min_max_trivia,
    r#repeat_min_max_trivia_mandatory,
    r#repeat_exact,
    r#repeat_exact_trivia,
    r#repeat_exact_trivia_mandatory,
    r#repeat_min,
    r#repeat_min_trivia,
    r#repeat_min_trivia_mandatory,
    r#repeat_max,
    r#repeat_max_trivia,
    r#repeat_max_trivia_mandatory,
    r#seperated,
    r#seperated_call,
    r#soi_at_start,
    r#push,
    r#pop,
    r#pop_all,
    r#drop,
    r#peek,
    r#peek_all,
    r#peek_slice,
    r#repeat_mutate_stack,
    r#repeat_mutate_stack_pop_all,
    r#will_fail,
    r#stack_resume_after_fail,
    r#peek_,
    r#peek_all_,
    r#peek_slice_23,
    r#pop_,
    r#pop_all_,
    r#pop_fail,
    r#checkpoint_restore,
    r#ascii_digits,
    r#ascii_nonzero_digits,
    r#ascii_bin_digits,
    r#ascii_oct_digits,
    r#ascii_hex_digits,
    r#ascii_alpha_lowers,
    r#ascii_alpha_uppers,
    r#ascii_alphas,
    r#ascii_alphanumerics,
    r#asciis,
    r#newline,
    r#unicode,
    r#han,
    r#hangul,
    r#hiragana,
    r#arabic,
    r#emoji,
    r#whitespace,
    r#comment,
}
impl ::pest3::typed::RuleType for Rule {
    const EOI: Self = Rule::EOI;
    type OptionalTrivia<'i> = rules::__OptionalTrivia<'i>;
    type MandatoryTrivia<'i> = rules::__MandatoryTrivia<'i>;
}
#[doc = "Definitions of statically typed nodes generated by pest-generator."]
pub mod rules {
    pub type __OptionalTrivia<'i> =
        super::generics::Rep<super::generics::Choice2<r#whitespace<'i>, r#comment<'i>>, 0u8>;
    pub type __MandatoryTrivia<'i> =
        super::generics::Rep<super::generics::Choice2<r#whitespace<'i>, r#comment<'i>>, 0u8>;
    #[doc = "Generated for rule `string`. Grammar: `\"abc\"`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#string<'i> {
        #[doc = r" Matched structure."]
        pub content: super::generics::Str<super::wrapper::W0>,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#string<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#string;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#string,
        (),
        super::Rule,
        super::Rule::r#string,
        super::generics::Str::<super::wrapper::W0>,
        super::generics::Str::<super::wrapper::W0>,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#string<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#string<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            let rule = super::Rule::r#string;
            rule
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `insensitive`. Grammar: `^\"abc\"`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#insensitive<'i> {
        #[doc = r" Matched structure."]
        pub content: super::generics::Insens<'i, super::wrapper::W0>,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#insensitive<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#insensitive;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#insensitive,
        (),
        super::Rule,
        super::Rule::r#insensitive,
        super::generics::Insens::<'i, super::wrapper::W0>,
        super::generics::Insens::<'i, super::wrapper::W0>,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#insensitive<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#insensitive<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            let rule = super::Rule::r#insensitive;
            rule
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `range`. Grammar: `'0'..'9'`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#range<'i> {
        #[doc = r" Matched structure."]
        pub content: super::generics::CharRange<'0', '9'>,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#range<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#range;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#range,
        (),
        super::Rule,
        super::Rule::r#range,
        super::generics::CharRange::<'0', '9'>,
        super::generics::CharRange::<'0', '9'>,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#range<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#range<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            let rule = super::Rule::r#range;
            rule
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `ident`. Grammar: `string`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#ident<'i> {
        #[doc = r" Matched structure."]
        pub content: r#string<'i>,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#ident<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#ident;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#ident,
        (),
        super::Rule,
        super::Rule::r#ident,
        r#string::<'i>,
        r#string::<'i>,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#ident<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#ident<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            let rule = super::Rule::r#ident;
            rule
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `pos_pred`. Grammar: `&string`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#pos_pred<'i> {
        #[doc = r" Matched structure."]
        pub content: super::generics::Positive<r#string<'i>>,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#pos_pred<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#pos_pred;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#pos_pred,
        (),
        super::Rule,
        super::Rule::r#pos_pred,
        super::generics::Positive::<r#string::<'i>>,
        super::generics::Positive::<r#string::<'i>>,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#pos_pred<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#pos_pred<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            let rule = super::Rule::r#pos_pred;
            rule
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `neg_pred`. Grammar: `!string`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#neg_pred<'i> {
        #[doc = r" Matched structure."]
        pub content: super::generics::Negative<r#string<'i>>,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#neg_pred<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#neg_pred;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#neg_pred,
        (),
        super::Rule,
        super::Rule::r#neg_pred,
        super::generics::Negative::<r#string::<'i>>,
        super::generics::Negative::<r#string::<'i>>,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#neg_pred<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#neg_pred<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            let rule = super::Rule::r#neg_pred;
            rule
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `double_neg_pred`. Grammar: `!!string`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#double_neg_pred<'i> {
        #[doc = r" Matched structure."]
        pub content: super::generics::Negative<super::generics::Negative<r#string<'i>>>,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#double_neg_pred<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#double_neg_pred;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#double_neg_pred,
        (),
        super::Rule,
        super::Rule::r#double_neg_pred,
        super::generics::Negative::<super::generics::Negative::<r#string::<'i>>>,
        super::generics::Negative::<super::generics::Negative::<r#string::<'i>>>,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#double_neg_pred<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#double_neg_pred<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            let rule = super::Rule::r#double_neg_pred;
            rule
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `sequence`. Grammar: `(string - string)`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#sequence<'i> {
        #[doc = r" Matched structure."]
        pub content: super::generics::Sequence2<r#string<'i>, 0u8, r#string<'i>, 0u8>,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#sequence<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#sequence;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#sequence,
        (),
        super::Rule,
        super::Rule::r#sequence,
        super::generics::Sequence2::<r#string::<'i>, 0u8, r#string::<'i>, 0u8>,
        super::generics::Sequence2::<r#string::<'i>, 0u8, r#string::<'i>, 0u8>,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#sequence<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#sequence<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            let rule = super::Rule::r#sequence;
            rule
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `sequence_trivia`. Grammar: `(string ~ string)`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#sequence_trivia<'i> {
        #[doc = r" Matched structure."]
        pub content: super::generics::Sequence2<r#string<'i>, 0u8, r#string<'i>, 1u8>,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#sequence_trivia<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#sequence_trivia;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#sequence_trivia,
        (),
        super::Rule,
        super::Rule::r#sequence_trivia,
        super::generics::Sequence2::<r#string::<'i>, 0u8, r#string::<'i>, 1u8>,
        super::generics::Sequence2::<r#string::<'i>, 0u8, r#string::<'i>, 1u8>,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#sequence_trivia<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#sequence_trivia<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            let rule = super::Rule::r#sequence_trivia;
            rule
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `sequence_trivia_mandatory`. Grammar: `(string ^ string)`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#sequence_trivia_mandatory<'i> {
        #[doc = r" Matched structure."]
        pub content: super::generics::Sequence2<r#string<'i>, 0u8, r#string<'i>, 2u8>,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#sequence_trivia_mandatory<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#sequence_trivia_mandatory;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#sequence_trivia_mandatory,
        (),
        super::Rule,
        super::Rule::r#sequence_trivia_mandatory,
        super::generics::Sequence2::<r#string::<'i>, 0u8, r#string::<'i>, 2u8>,
        super::generics::Sequence2::<r#string::<'i>, 0u8, r#string::<'i>, 2u8>,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#sequence_trivia_mandatory<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#sequence_trivia_mandatory<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            let rule = super::Rule::r#sequence_trivia_mandatory;
            rule
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `sequence_nested`. Grammar: `!(string ~ string)`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#sequence_nested<'i> {
        #[doc = r" Matched structure."]
        pub content: super::generics::Negative<
            super::generics::Sequence2<r#string<'i>, 0u8, r#string<'i>, 1u8>,
        >,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#sequence_nested<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#sequence_nested;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#sequence_nested,
        (),
        super::Rule,
        super::Rule::r#sequence_nested,
        super::generics::Negative::<
            super::generics::Sequence2::<r#string::<'i>, 0u8, r#string::<'i>, 1u8>,
        >,
        super::generics::Negative::<
            super::generics::Sequence2::<r#string::<'i>, 0u8, r#string::<'i>, 1u8>,
        >,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#sequence_nested<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#sequence_nested<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            let rule = super::Rule::r#sequence_nested;
            rule
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `choice`. Grammar: `(string | range)`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#choice<'i> {
        #[doc = r" Matched structure."]
        pub content: super::generics::Choice2<r#string<'i>, r#range<'i>>,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#choice<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#choice;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#choice,
        (),
        super::Rule,
        super::Rule::r#choice,
        super::generics::Choice2::<r#string::<'i>, r#range::<'i>>,
        super::generics::Choice2::<r#string::<'i>, r#range::<'i>>,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#choice<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#choice<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            let rule = super::Rule::r#choice;
            rule
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `choice_trivia`. Grammar: `(string | range)`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#choice_trivia<'i> {
        #[doc = r" Matched structure."]
        pub content: super::generics::Choice2<r#string<'i>, r#range<'i>>,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#choice_trivia<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#choice_trivia;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#choice_trivia,
        (),
        super::Rule,
        super::Rule::r#choice_trivia,
        super::generics::Choice2::<r#string::<'i>, r#range::<'i>>,
        super::generics::Choice2::<r#string::<'i>, r#range::<'i>>,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#choice_trivia<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#choice_trivia<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            let rule = super::Rule::r#choice_trivia;
            rule
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `choice_trivia_mandatory`. Grammar: `(string | range)`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#choice_trivia_mandatory<'i> {
        #[doc = r" Matched structure."]
        pub content: super::generics::Choice2<r#string<'i>, r#range<'i>>,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#choice_trivia_mandatory<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#choice_trivia_mandatory;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#choice_trivia_mandatory,
        (),
        super::Rule,
        super::Rule::r#choice_trivia_mandatory,
        super::generics::Choice2::<r#string::<'i>, r#range::<'i>>,
        super::generics::Choice2::<r#string::<'i>, r#range::<'i>>,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#choice_trivia_mandatory<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#choice_trivia_mandatory<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            let rule = super::Rule::r#choice_trivia_mandatory;
            rule
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `choice_prefix`. Grammar: `(string | range)`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#choice_prefix<'i> {
        #[doc = r" Matched structure."]
        pub content: super::generics::Choice2<r#string<'i>, r#range<'i>>,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#choice_prefix<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#choice_prefix;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#choice_prefix,
        (),
        super::Rule,
        super::Rule::r#choice_prefix,
        super::generics::Choice2::<r#string::<'i>, r#range::<'i>>,
        super::generics::Choice2::<r#string::<'i>, r#range::<'i>>,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#choice_prefix<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#choice_prefix<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            let rule = super::Rule::r#choice_prefix;
            rule
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `optional`. Grammar: `string?`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#optional<'i> {
        #[doc = r" Matched structure."]
        pub content: ::pest3::std::Option<r#string<'i>>,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#optional<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#optional;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#optional,
        (),
        super::Rule,
        super::Rule::r#optional,
        ::pest3::std::Option::<r#string::<'i>>,
        ::pest3::std::Option::<r#string::<'i>>,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#optional<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#optional<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            let rule = super::Rule::r#optional;
            rule
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `optional_trivia`. Grammar: `string~?`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#optional_trivia<'i> {
        #[doc = r" Matched structure."]
        pub content: ::pest3::std::Option<r#string<'i>>,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#optional_trivia<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#optional_trivia;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#optional_trivia,
        (),
        super::Rule,
        super::Rule::r#optional_trivia,
        ::pest3::std::Option::<r#string::<'i>>,
        ::pest3::std::Option::<r#string::<'i>>,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#optional_trivia<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#optional_trivia<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            let rule = super::Rule::r#optional_trivia;
            rule
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `repeat`. Grammar: `string*`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#repeat<'i> {
        #[doc = r" Matched structure."]
        pub content: super::generics::Rep<r#string<'i>, 0u8>,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#repeat<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#repeat;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#repeat,
        (),
        super::Rule,
        super::Rule::r#repeat,
        super::generics::Rep::<r#string::<'i>, 0u8>,
        super::generics::Rep::<r#string::<'i>, 0u8>,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#repeat<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#repeat<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            let rule = super::Rule::r#repeat;
            rule
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `repeat_trivia`. Grammar: `string~*`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#repeat_trivia<'i> {
        #[doc = r" Matched structure."]
        pub content: super::generics::Rep<r#string<'i>, 1u8>,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#repeat_trivia<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#repeat_trivia;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#repeat_trivia,
        (),
        super::Rule,
        super::Rule::r#repeat_trivia,
        super::generics::Rep::<r#string::<'i>, 1u8>,
        super::generics::Rep::<r#string::<'i>, 1u8>,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#repeat_trivia<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#repeat_trivia<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            let rule = super::Rule::r#repeat_trivia;
            rule
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `repeat_trivia_mandatory`. Grammar: `string^*`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#repeat_trivia_mandatory<'i> {
        #[doc = r" Matched structure."]
        pub content: super::generics::Rep<r#string<'i>, 2u8>,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#repeat_trivia_mandatory<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#repeat_trivia_mandatory;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#repeat_trivia_mandatory,
        (),
        super::Rule,
        super::Rule::r#repeat_trivia_mandatory,
        super::generics::Rep::<r#string::<'i>, 2u8>,
        super::generics::Rep::<r#string::<'i>, 2u8>,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#repeat_trivia_mandatory<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#repeat_trivia_mandatory<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            let rule = super::Rule::r#repeat_trivia_mandatory;
            rule
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `repeat_once`. Grammar: `string+`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#repeat_once<'i> {
        #[doc = r" Matched structure."]
        pub content: super::generics::RepOnce<r#string<'i>, 0u8>,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#repeat_once<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#repeat_once;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#repeat_once,
        (),
        super::Rule,
        super::Rule::r#repeat_once,
        super::generics::RepOnce::<r#string::<'i>, 0u8>,
        super::generics::RepOnce::<r#string::<'i>, 0u8>,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#repeat_once<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#repeat_once<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            let rule = super::Rule::r#repeat_once;
            rule
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `repeat_once_trivia`. Grammar: `string~+`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#repeat_once_trivia<'i> {
        #[doc = r" Matched structure."]
        pub content: super::generics::RepOnce<r#string<'i>, 1u8>,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#repeat_once_trivia<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#repeat_once_trivia;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#repeat_once_trivia,
        (),
        super::Rule,
        super::Rule::r#repeat_once_trivia,
        super::generics::RepOnce::<r#string::<'i>, 1u8>,
        super::generics::RepOnce::<r#string::<'i>, 1u8>,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#repeat_once_trivia<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#repeat_once_trivia<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            let rule = super::Rule::r#repeat_once_trivia;
            rule
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `repeat_once_trivia_mandatory`. Grammar: `string^+`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#repeat_once_trivia_mandatory<'i> {
        #[doc = r" Matched structure."]
        pub content: super::generics::RepOnce<r#string<'i>, 2u8>,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#repeat_once_trivia_mandatory<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#repeat_once_trivia_mandatory;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#repeat_once_trivia_mandatory,
        (),
        super::Rule,
        super::Rule::r#repeat_once_trivia_mandatory,
        super::generics::RepOnce::<r#string::<'i>, 2u8>,
        super::generics::RepOnce::<r#string::<'i>, 2u8>,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#repeat_once_trivia_mandatory<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#repeat_once_trivia_mandatory<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            let rule = super::Rule::r#repeat_once_trivia_mandatory;
            rule
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `repeat_min_max`. Grammar: `string[2..3]`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#repeat_min_max<'i> {
        #[doc = r" Matched structure."]
        pub content: super::generics::RepMinMax<r#string<'i>, 0u8, 2usize, 3usize>,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#repeat_min_max<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#repeat_min_max;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#repeat_min_max,
        (),
        super::Rule,
        super::Rule::r#repeat_min_max,
        super::generics::RepMinMax::<r#string::<'i>, 0u8, 2usize, 3usize>,
        super::generics::RepMinMax::<r#string::<'i>, 0u8, 2usize, 3usize>,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#repeat_min_max<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#repeat_min_max<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            let rule = super::Rule::r#repeat_min_max;
            rule
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `repeat_min_max_trivia`. Grammar: `string~[2..3]`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#repeat_min_max_trivia<'i> {
        #[doc = r" Matched structure."]
        pub content: super::generics::RepMinMax<r#string<'i>, 1u8, 2usize, 3usize>,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#repeat_min_max_trivia<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#repeat_min_max_trivia;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#repeat_min_max_trivia,
        (),
        super::Rule,
        super::Rule::r#repeat_min_max_trivia,
        super::generics::RepMinMax::<r#string::<'i>, 1u8, 2usize, 3usize>,
        super::generics::RepMinMax::<r#string::<'i>, 1u8, 2usize, 3usize>,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#repeat_min_max_trivia<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#repeat_min_max_trivia<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            let rule = super::Rule::r#repeat_min_max_trivia;
            rule
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `repeat_min_max_trivia_mandatory`. Grammar: `string^[2..3]`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#repeat_min_max_trivia_mandatory<'i> {
        #[doc = r" Matched structure."]
        pub content: super::generics::RepMinMax<r#string<'i>, 2u8, 2usize, 3usize>,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#repeat_min_max_trivia_mandatory<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#repeat_min_max_trivia_mandatory;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#repeat_min_max_trivia_mandatory,
        (),
        super::Rule,
        super::Rule::r#repeat_min_max_trivia_mandatory,
        super::generics::RepMinMax::<r#string::<'i>, 2u8, 2usize, 3usize>,
        super::generics::RepMinMax::<r#string::<'i>, 2u8, 2usize, 3usize>,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#repeat_min_max_trivia_mandatory<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#repeat_min_max_trivia_mandatory<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            let rule = super::Rule::r#repeat_min_max_trivia_mandatory;
            rule
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `repeat_exact`. Grammar: `string[2..2]`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#repeat_exact<'i> {
        #[doc = r" Matched structure."]
        pub content: super::generics::RepMinMax<r#string<'i>, 0u8, 2usize, 2usize>,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#repeat_exact<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#repeat_exact;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#repeat_exact,
        (),
        super::Rule,
        super::Rule::r#repeat_exact,
        super::generics::RepMinMax::<r#string::<'i>, 0u8, 2usize, 2usize>,
        super::generics::RepMinMax::<r#string::<'i>, 0u8, 2usize, 2usize>,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#repeat_exact<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#repeat_exact<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            let rule = super::Rule::r#repeat_exact;
            rule
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `repeat_exact_trivia`. Grammar: `string~[2..2]`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#repeat_exact_trivia<'i> {
        #[doc = r" Matched structure."]
        pub content: super::generics::RepMinMax<r#string<'i>, 1u8, 2usize, 2usize>,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#repeat_exact_trivia<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#repeat_exact_trivia;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#repeat_exact_trivia,
        (),
        super::Rule,
        super::Rule::r#repeat_exact_trivia,
        super::generics::RepMinMax::<r#string::<'i>, 1u8, 2usize, 2usize>,
        super::generics::RepMinMax::<r#string::<'i>, 1u8, 2usize, 2usize>,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#repeat_exact_trivia<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#repeat_exact_trivia<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            let rule = super::Rule::r#repeat_exact_trivia;
            rule
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `repeat_exact_trivia_mandatory`. Grammar: `string^[2..2]`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#repeat_exact_trivia_mandatory<'i> {
        #[doc = r" Matched structure."]
        pub content: super::generics::RepMinMax<r#string<'i>, 2u8, 2usize, 2usize>,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#repeat_exact_trivia_mandatory<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#repeat_exact_trivia_mandatory;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#repeat_exact_trivia_mandatory,
        (),
        super::Rule,
        super::Rule::r#repeat_exact_trivia_mandatory,
        super::generics::RepMinMax::<r#string::<'i>, 2u8, 2usize, 2usize>,
        super::generics::RepMinMax::<r#string::<'i>, 2u8, 2usize, 2usize>,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#repeat_exact_trivia_mandatory<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#repeat_exact_trivia_mandatory<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            let rule = super::Rule::r#repeat_exact_trivia_mandatory;
            rule
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `repeat_min`. Grammar: `string[2..]`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#repeat_min<'i> {
        #[doc = r" Matched structure."]
        pub content: super::generics::RepMin<r#string<'i>, 0u8, 2usize>,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#repeat_min<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#repeat_min;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#repeat_min,
        (),
        super::Rule,
        super::Rule::r#repeat_min,
        super::generics::RepMin::<r#string::<'i>, 0u8, 2usize>,
        super::generics::RepMin::<r#string::<'i>, 0u8, 2usize>,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#repeat_min<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#repeat_min<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            let rule = super::Rule::r#repeat_min;
            rule
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `repeat_min_trivia`. Grammar: `string~[2..]`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#repeat_min_trivia<'i> {
        #[doc = r" Matched structure."]
        pub content: super::generics::RepMin<r#string<'i>, 1u8, 2usize>,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#repeat_min_trivia<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#repeat_min_trivia;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#repeat_min_trivia,
        (),
        super::Rule,
        super::Rule::r#repeat_min_trivia,
        super::generics::RepMin::<r#string::<'i>, 1u8, 2usize>,
        super::generics::RepMin::<r#string::<'i>, 1u8, 2usize>,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#repeat_min_trivia<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#repeat_min_trivia<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            let rule = super::Rule::r#repeat_min_trivia;
            rule
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `repeat_min_trivia_mandatory`. Grammar: `string^[2..]`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#repeat_min_trivia_mandatory<'i> {
        #[doc = r" Matched structure."]
        pub content: super::generics::RepMin<r#string<'i>, 2u8, 2usize>,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#repeat_min_trivia_mandatory<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#repeat_min_trivia_mandatory;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#repeat_min_trivia_mandatory,
        (),
        super::Rule,
        super::Rule::r#repeat_min_trivia_mandatory,
        super::generics::RepMin::<r#string::<'i>, 2u8, 2usize>,
        super::generics::RepMin::<r#string::<'i>, 2u8, 2usize>,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#repeat_min_trivia_mandatory<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#repeat_min_trivia_mandatory<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            let rule = super::Rule::r#repeat_min_trivia_mandatory;
            rule
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `repeat_max`. Grammar: `string[..2]`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#repeat_max<'i> {
        #[doc = r" Matched structure."]
        pub content: super::generics::RepMax<r#string<'i>, 0u8, 2usize>,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#repeat_max<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#repeat_max;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#repeat_max,
        (),
        super::Rule,
        super::Rule::r#repeat_max,
        super::generics::RepMax::<r#string::<'i>, 0u8, 2usize>,
        super::generics::RepMax::<r#string::<'i>, 0u8, 2usize>,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#repeat_max<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#repeat_max<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            let rule = super::Rule::r#repeat_max;
            rule
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `repeat_max_trivia`. Grammar: `string~[..2]`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#repeat_max_trivia<'i> {
        #[doc = r" Matched structure."]
        pub content: super::generics::RepMax<r#string<'i>, 1u8, 2usize>,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#repeat_max_trivia<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#repeat_max_trivia;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#repeat_max_trivia,
        (),
        super::Rule,
        super::Rule::r#repeat_max_trivia,
        super::generics::RepMax::<r#string::<'i>, 1u8, 2usize>,
        super::generics::RepMax::<r#string::<'i>, 1u8, 2usize>,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#repeat_max_trivia<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#repeat_max_trivia<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            let rule = super::Rule::r#repeat_max_trivia;
            rule
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `repeat_max_trivia_mandatory`. Grammar: `string^[..2]`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#repeat_max_trivia_mandatory<'i> {
        #[doc = r" Matched structure."]
        pub content: super::generics::RepMax<r#string<'i>, 2u8, 2usize>,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#repeat_max_trivia_mandatory<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#repeat_max_trivia_mandatory;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#repeat_max_trivia_mandatory,
        (),
        super::Rule,
        super::Rule::r#repeat_max_trivia_mandatory,
        super::generics::RepMax::<r#string::<'i>, 2u8, 2usize>,
        super::generics::RepMax::<r#string::<'i>, 2u8, 2usize>,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#repeat_max_trivia_mandatory<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#repeat_max_trivia_mandatory<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            let rule = super::Rule::r#repeat_max_trivia_mandatory;
            rule
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `seperated`. Grammar: `(e ~ (\",\" ~ e)*)`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#seperated<'i, r#e> {
        #[doc = r" Matched structure."]
        pub content: super::generics::Sequence2<
            r#e,
            0u8,
            super::generics::Rep<
                super::generics::Sequence2<super::generics::Str<super::wrapper::W1>, 0u8, r#e, 1u8>,
                0u8,
            >,
            1u8,
        >,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i, r#e> ::pest3::typed::wrapper::Rule for r#seperated<'i, r#e> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#seperated;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#seperated,
        (r#e),
        super::Rule,
        super::Rule::r#seperated,
        super::generics::Sequence2::<
            r#e,
            0u8,
            super::generics::Rep::<
                super::generics::Sequence2::<
                    super::generics::Str::<super::wrapper::W1>,
                    0u8,
                    r#e,
                    1u8,
                >,
                0u8,
            >,
            1u8,
        >,
        super::generics::Sequence2::<
            r#e,
            0u8,
            super::generics::Rep::<
                super::generics::Sequence2::<
                    super::generics::Str::<super::wrapper::W1>,
                    0u8,
                    r#e,
                    1u8,
                >,
                0u8,
            >,
            1u8,
        >,
    );
    #[allow(non_camel_case_types)]
    impl<'i, r#e: ::pest3::typed::PairContainer<super::Rule>>
        ::pest3::typed::PairContainer<super::Rule> for r#seperated<'i, r#e>
    {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i, r#e: ::pest3::typed::PairContainer<super::Rule>> ::pest3::typed::PairTree<super::Rule>
        for r#seperated<'i, r#e>
    {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            let rule = super::Rule::r#seperated;
            rule
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `seperated_call`. Grammar: `seperated(string)`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#seperated_call<'i> {
        #[doc = r" Matched structure."]
        pub content: r#seperated<'i, r#string<'i>>,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#seperated_call<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#seperated_call;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#seperated_call,
        (),
        super::Rule,
        super::Rule::r#seperated_call,
        r#seperated::<'i, r#string::<'i>>,
        r#seperated::<'i, r#string::<'i>>,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#seperated_call<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#seperated_call<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            let rule = super::Rule::r#seperated_call;
            rule
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `soi_at_start`. Grammar: `(pest::soi ~ string)`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#soi_at_start<'i> {
        #[doc = r" Matched structure."]
        pub content: super::generics::Sequence2<super::generics::r#soi, 0u8, r#string<'i>, 1u8>,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#soi_at_start<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#soi_at_start;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#soi_at_start,
        (),
        super::Rule,
        super::Rule::r#soi_at_start,
        super::generics::Sequence2::<super::generics::r#soi, 0u8, r#string::<'i>, 1u8>,
        super::generics::Sequence2::<super::generics::r#soi, 0u8, r#string::<'i>, 1u8>,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#soi_at_start<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#soi_at_start<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            let rule = super::Rule::r#soi_at_start;
            rule
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `push`. Grammar: `pest::stack::push(exp)`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#push<'i, r#exp> {
        #[doc = r" Matched structure."]
        pub content: super::generics::r#push<r#exp>,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i, r#exp> ::pest3::typed::wrapper::Rule for r#push<'i, r#exp> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#push;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#push,
        (r#exp),
        super::Rule,
        super::Rule::r#push,
        super::generics::r#push::<r#exp>,
        super::generics::r#push::<r#exp>,
    );
    #[allow(non_camel_case_types)]
    impl<'i, r#exp: ::pest3::typed::PairContainer<super::Rule>>
        ::pest3::typed::PairContainer<super::Rule> for r#push<'i, r#exp>
    {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i, r#exp: ::pest3::typed::PairContainer<super::Rule>>
        ::pest3::typed::PairTree<super::Rule> for r#push<'i, r#exp>
    {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            let rule = super::Rule::r#push;
            rule
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `pop`. Grammar: `stack::pop`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#pop<'i> {
        #[doc = r" Matched structure."]
        pub content: super::generics::r#pop<'i>,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#pop<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#pop;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#pop,
        (),
        super::Rule,
        super::Rule::r#pop,
        super::generics::r#pop::<'i>,
        super::generics::r#pop::<'i>,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#pop<'i> {
        fn for_each_child_pair(
            &self,
            _f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
        }
        fn for_self_or_for_each_child_pair(
            &self,
            _f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
        }
    }
    #[doc = "Generated for rule `pop_all`. Grammar: `stack::pop_all`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#pop_all<'i> {
        #[doc = r" Matched structure."]
        pub content: super::generics::r#pop_all<'i>,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#pop_all<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#pop_all;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#pop_all,
        (),
        super::Rule,
        super::Rule::r#pop_all,
        super::generics::r#pop_all::<'i>,
        super::generics::r#pop_all::<'i>,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#pop_all<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#pop_all<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            let rule = super::Rule::r#pop_all;
            rule
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `drop`. Grammar: `stack::drop`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#drop<'i> {
        #[doc = r" Matched structure."]
        pub content: super::generics::r#drop,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#drop<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#drop;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#drop,
        (),
        super::Rule,
        super::Rule::r#drop,
        super::generics::r#drop,
        super::generics::r#drop,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#drop<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#drop<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            let rule = super::Rule::r#drop;
            rule
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `peek`. Grammar: `stack::peek`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#peek<'i> {
        #[doc = r" Matched structure."]
        pub content: super::generics::r#peek<'i>,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#peek<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#peek;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#peek,
        (),
        super::Rule,
        super::Rule::r#peek,
        super::generics::r#peek::<'i>,
        super::generics::r#peek::<'i>,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#peek<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#peek<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            let rule = super::Rule::r#peek;
            rule
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `peek_all`. Grammar: `stack::peek_all`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#peek_all<'i> {
        #[doc = r" Matched structure."]
        pub content: super::generics::r#peek_all<'i>,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#peek_all<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#peek_all;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#peek_all,
        (),
        super::Rule,
        super::Rule::r#peek_all,
        super::generics::r#peek_all::<'i>,
        super::generics::r#peek_all::<'i>,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#peek_all<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#peek_all<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            let rule = super::Rule::r#peek_all;
            rule
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `peek_slice`. Grammar: `stack::peek[1..-2]`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#peek_slice<'i> {
        #[doc = r" Matched structure."]
        pub content: super::generics::PeekSlice2<1isize, -2isize>,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#peek_slice<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#peek_slice;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#peek_slice,
        (),
        super::Rule,
        super::Rule::r#peek_slice,
        super::generics::PeekSlice2::<1isize, -2isize>,
        super::generics::PeekSlice2::<1isize, -2isize>,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#peek_slice<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#peek_slice<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            let rule = super::Rule::r#peek_slice;
            rule
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `repeat_mutate_stack`. Grammar: `((push('a'..'c') ~ \",\")* ~ (pop ~ (pop ~ pop)))`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#repeat_mutate_stack<'i> {
        #[doc = r" Matched structure."]
        pub content: super::generics::Sequence4<
            super::generics::Rep<
                super::generics::Sequence2<
                    r#push<'i, super::generics::CharRange<'a', 'c'>>,
                    0u8,
                    super::generics::Str<super::wrapper::W1>,
                    1u8,
                >,
                0u8,
            >,
            0u8,
            r#pop<'i>,
            1u8,
            r#pop<'i>,
            1u8,
            r#pop<'i>,
            1u8,
        >,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#repeat_mutate_stack<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#repeat_mutate_stack;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#repeat_mutate_stack,
        (),
        super::Rule,
        super::Rule::r#repeat_mutate_stack,
        super::generics::Sequence4::<
            super::generics::Rep::<
                super::generics::Sequence2::<
                    r#push::<'i, super::generics::CharRange::<'a', 'c'>>,
                    0u8,
                    super::generics::Str::<super::wrapper::W1>,
                    1u8,
                >,
                0u8,
            >,
            0u8,
            r#pop::<'i>,
            1u8,
            r#pop::<'i>,
            1u8,
            r#pop::<'i>,
            1u8,
        >,
        super::generics::Sequence4::<
            super::generics::Rep::<
                super::generics::Sequence2::<
                    r#push::<'i, super::generics::CharRange::<'a', 'c'>>,
                    0u8,
                    super::generics::Str::<super::wrapper::W1>,
                    1u8,
                >,
                0u8,
            >,
            0u8,
            r#pop::<'i>,
            1u8,
            r#pop::<'i>,
            1u8,
            r#pop::<'i>,
            1u8,
        >,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#repeat_mutate_stack<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#repeat_mutate_stack<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            let rule = super::Rule::r#repeat_mutate_stack;
            rule
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `repeat_mutate_stack_pop_all`. Grammar: `((push('a'..'c') ~ \",\")* ~ pop_all())`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#repeat_mutate_stack_pop_all<'i> {
        #[doc = r" Matched structure."]
        pub content: super::generics::Sequence2<
            super::generics::Rep<
                super::generics::Sequence2<
                    r#push<'i, super::generics::CharRange<'a', 'c'>>,
                    0u8,
                    super::generics::Str<super::wrapper::W1>,
                    1u8,
                >,
                0u8,
            >,
            0u8,
            r#pop_all<'i>,
            1u8,
        >,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#repeat_mutate_stack_pop_all<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#repeat_mutate_stack_pop_all;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#repeat_mutate_stack_pop_all,
        (),
        super::Rule,
        super::Rule::r#repeat_mutate_stack_pop_all,
        super::generics::Sequence2::<
            super::generics::Rep::<
                super::generics::Sequence2::<
                    r#push::<'i, super::generics::CharRange::<'a', 'c'>>,
                    0u8,
                    super::generics::Str::<super::wrapper::W1>,
                    1u8,
                >,
                0u8,
            >,
            0u8,
            r#pop_all::<'i>,
            1u8,
        >,
        super::generics::Sequence2::<
            super::generics::Rep::<
                super::generics::Sequence2::<
                    r#push::<'i, super::generics::CharRange::<'a', 'c'>>,
                    0u8,
                    super::generics::Str::<super::wrapper::W1>,
                    1u8,
                >,
                0u8,
            >,
            0u8,
            r#pop_all::<'i>,
            1u8,
        >,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#repeat_mutate_stack_pop_all<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#repeat_mutate_stack_pop_all<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            let rule = super::Rule::r#repeat_mutate_stack_pop_all;
            rule
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `will_fail`. Grammar: `(repeat_mutate_stack_pop_all ~ \"FAIL\")`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#will_fail<'i> {
        #[doc = r" Matched structure."]
        pub content: super::generics::Sequence2<
            r#repeat_mutate_stack_pop_all<'i>,
            0u8,
            super::generics::Str<super::wrapper::W2>,
            1u8,
        >,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#will_fail<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#will_fail;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#will_fail,
        (),
        super::Rule,
        super::Rule::r#will_fail,
        super::generics::Sequence2::<
            r#repeat_mutate_stack_pop_all::<'i>,
            0u8,
            super::generics::Str::<super::wrapper::W2>,
            1u8,
        >,
        super::generics::Sequence2::<
            r#repeat_mutate_stack_pop_all::<'i>,
            0u8,
            super::generics::Str::<super::wrapper::W2>,
            1u8,
        >,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#will_fail<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#will_fail<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            let rule = super::Rule::r#will_fail;
            rule
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `stack_resume_after_fail`. Grammar: `(will_fail | repeat_mutate_stack_pop_all)`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#stack_resume_after_fail<'i> {
        #[doc = r" Matched structure."]
        pub content: super::generics::Choice2<r#will_fail<'i>, r#repeat_mutate_stack_pop_all<'i>>,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#stack_resume_after_fail<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#stack_resume_after_fail;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#stack_resume_after_fail,
        (),
        super::Rule,
        super::Rule::r#stack_resume_after_fail,
        super::generics::Choice2::<r#will_fail::<'i>, r#repeat_mutate_stack_pop_all::<'i>>,
        super::generics::Choice2::<r#will_fail::<'i>, r#repeat_mutate_stack_pop_all::<'i>>,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#stack_resume_after_fail<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#stack_resume_after_fail<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            let rule = super::Rule::r#stack_resume_after_fail;
            rule
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `peek_`. Grammar: `(push(range) ~ (push(range) ~ (peek() ~ peek())))`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#peek_<'i> {
        #[doc = r" Matched structure."]
        pub content: super::generics::Sequence4<
            r#push<'i, r#range<'i>>,
            0u8,
            r#push<'i, r#range<'i>>,
            1u8,
            r#peek<'i>,
            1u8,
            r#peek<'i>,
            1u8,
        >,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#peek_<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#peek_;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#peek_,
        (),
        super::Rule,
        super::Rule::r#peek_,
        super::generics::Sequence4::<
            r#push::<'i, r#range::<'i>>,
            0u8,
            r#push::<'i, r#range::<'i>>,
            1u8,
            r#peek::<'i>,
            1u8,
            r#peek::<'i>,
            1u8,
        >,
        super::generics::Sequence4::<
            r#push::<'i, r#range::<'i>>,
            0u8,
            r#push::<'i, r#range::<'i>>,
            1u8,
            r#peek::<'i>,
            1u8,
            r#peek::<'i>,
            1u8,
        >,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#peek_<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#peek_<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            let rule = super::Rule::r#peek_;
            rule
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `peek_all_`. Grammar: `(push(range) ~ (push(range) ~ peek_all()))`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#peek_all_<'i> {
        #[doc = r" Matched structure."]
        pub content: super::generics::Sequence3<
            r#push<'i, r#range<'i>>,
            0u8,
            r#push<'i, r#range<'i>>,
            1u8,
            r#peek_all<'i>,
            1u8,
        >,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#peek_all_<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#peek_all_;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#peek_all_,
        (),
        super::Rule,
        super::Rule::r#peek_all_,
        super::generics::Sequence3::<
            r#push::<'i, r#range::<'i>>,
            0u8,
            r#push::<'i, r#range::<'i>>,
            1u8,
            r#peek_all::<'i>,
            1u8,
        >,
        super::generics::Sequence3::<
            r#push::<'i, r#range::<'i>>,
            0u8,
            r#push::<'i, r#range::<'i>>,
            1u8,
            r#peek_all::<'i>,
            1u8,
        >,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#peek_all_<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#peek_all_<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            let rule = super::Rule::r#peek_all_;
            rule
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `peek_slice_23`. Grammar: `(push(range) ~ (push(range) ~ (push(range) ~ (push(range) ~ (push(range) ~ peek_slice())))))`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#peek_slice_23<'i> {
        #[doc = r" Matched structure."]
        pub content: super::generics::Sequence6<
            r#push<'i, r#range<'i>>,
            0u8,
            r#push<'i, r#range<'i>>,
            1u8,
            r#push<'i, r#range<'i>>,
            1u8,
            r#push<'i, r#range<'i>>,
            1u8,
            r#push<'i, r#range<'i>>,
            1u8,
            r#peek_slice<'i>,
            1u8,
        >,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#peek_slice_23<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#peek_slice_23;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#peek_slice_23,
        (),
        super::Rule,
        super::Rule::r#peek_slice_23,
        super::generics::Sequence6::<
            r#push::<'i, r#range::<'i>>,
            0u8,
            r#push::<'i, r#range::<'i>>,
            1u8,
            r#push::<'i, r#range::<'i>>,
            1u8,
            r#push::<'i, r#range::<'i>>,
            1u8,
            r#push::<'i, r#range::<'i>>,
            1u8,
            r#peek_slice::<'i>,
            1u8,
        >,
        super::generics::Sequence6::<
            r#push::<'i, r#range::<'i>>,
            0u8,
            r#push::<'i, r#range::<'i>>,
            1u8,
            r#push::<'i, r#range::<'i>>,
            1u8,
            r#push::<'i, r#range::<'i>>,
            1u8,
            r#push::<'i, r#range::<'i>>,
            1u8,
            r#peek_slice::<'i>,
            1u8,
        >,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#peek_slice_23<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#peek_slice_23<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            let rule = super::Rule::r#peek_slice_23;
            rule
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `pop_`. Grammar: `(push(range) ~ (push(range) ~ (pop ~ pop)))`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#pop_<'i> {
        #[doc = r" Matched structure."]
        pub content: super::generics::Sequence4<
            r#push<'i, r#range<'i>>,
            0u8,
            r#push<'i, r#range<'i>>,
            1u8,
            r#pop<'i>,
            1u8,
            r#pop<'i>,
            1u8,
        >,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#pop_<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#pop_;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#pop_,
        (),
        super::Rule,
        super::Rule::r#pop_,
        super::generics::Sequence4::<
            r#push::<'i, r#range::<'i>>,
            0u8,
            r#push::<'i, r#range::<'i>>,
            1u8,
            r#pop::<'i>,
            1u8,
            r#pop::<'i>,
            1u8,
        >,
        super::generics::Sequence4::<
            r#push::<'i, r#range::<'i>>,
            0u8,
            r#push::<'i, r#range::<'i>>,
            1u8,
            r#pop::<'i>,
            1u8,
            r#pop::<'i>,
            1u8,
        >,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#pop_<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#pop_<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            let rule = super::Rule::r#pop_;
            rule
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `pop_all_`. Grammar: `(push(range) ~ (push(range) ~ pop_all()))`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#pop_all_<'i> {
        #[doc = r" Matched structure."]
        pub content: super::generics::Sequence3<
            r#push<'i, r#range<'i>>,
            0u8,
            r#push<'i, r#range<'i>>,
            1u8,
            r#pop_all<'i>,
            1u8,
        >,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#pop_all_<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#pop_all_;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#pop_all_,
        (),
        super::Rule,
        super::Rule::r#pop_all_,
        super::generics::Sequence3::<
            r#push::<'i, r#range::<'i>>,
            0u8,
            r#push::<'i, r#range::<'i>>,
            1u8,
            r#pop_all::<'i>,
            1u8,
        >,
        super::generics::Sequence3::<
            r#push::<'i, r#range::<'i>>,
            0u8,
            r#push::<'i, r#range::<'i>>,
            1u8,
            r#pop_all::<'i>,
            1u8,
        >,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#pop_all_<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#pop_all_<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            let rule = super::Rule::r#pop_all_;
            rule
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `pop_fail`. Grammar: `(push(range) ~ (!pop ~ (range ~ pop)))`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#pop_fail<'i> {
        #[doc = r" Matched structure."]
        pub content: super::generics::Sequence4<
            r#push<'i, r#range<'i>>,
            0u8,
            super::generics::Negative<r#pop<'i>>,
            1u8,
            r#range<'i>,
            1u8,
            r#pop<'i>,
            1u8,
        >,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#pop_fail<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#pop_fail;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#pop_fail,
        (),
        super::Rule,
        super::Rule::r#pop_fail,
        super::generics::Sequence4::<
            r#push::<'i, r#range::<'i>>,
            0u8,
            super::generics::Negative::<r#pop::<'i>>,
            1u8,
            r#range::<'i>,
            1u8,
            r#pop::<'i>,
            1u8,
        >,
        super::generics::Sequence4::<
            r#push::<'i, r#range::<'i>>,
            0u8,
            super::generics::Negative::<r#pop::<'i>>,
            1u8,
            r#range::<'i>,
            1u8,
            r#pop::<'i>,
            1u8,
        >,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#pop_fail<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#pop_fail<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            let rule = super::Rule::r#pop_fail;
            rule
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `checkpoint_restore`. Grammar: `(push(\"\") ~ (((push(\"a\") ~ (\"b\" ~ pop())) | ((drop() ~ \"b\") | (pop() ~ \"a\"))) ~ pest::eoi))`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#checkpoint_restore<'i> {
        #[doc = r" Matched structure."]
        pub content: super::generics::Sequence3<
            r#push<'i, super::generics::Str<super::wrapper::W3>>,
            0u8,
            super::generics::Choice3<
                super::generics::Sequence3<
                    r#push<'i, super::generics::Str<super::wrapper::W4>>,
                    0u8,
                    super::generics::Str<super::wrapper::W5>,
                    1u8,
                    r#pop<'i>,
                    1u8,
                >,
                super::generics::Sequence2<
                    r#drop<'i>,
                    0u8,
                    super::generics::Str<super::wrapper::W5>,
                    1u8,
                >,
                super::generics::Sequence2<
                    r#pop<'i>,
                    0u8,
                    super::generics::Str<super::wrapper::W4>,
                    1u8,
                >,
            >,
            1u8,
            super::generics::r#eoi,
            1u8,
        >,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#checkpoint_restore<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#checkpoint_restore;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#checkpoint_restore,
        (),
        super::Rule,
        super::Rule::r#checkpoint_restore,
        super::generics::Sequence3::<
            r#push::<'i, super::generics::Str::<super::wrapper::W3>>,
            0u8,
            super::generics::Choice3::<
                super::generics::Sequence3::<
                    r#push::<'i, super::generics::Str::<super::wrapper::W4>>,
                    0u8,
                    super::generics::Str::<super::wrapper::W5>,
                    1u8,
                    r#pop::<'i>,
                    1u8,
                >,
                super::generics::Sequence2::<
                    r#drop::<'i>,
                    0u8,
                    super::generics::Str::<super::wrapper::W5>,
                    1u8,
                >,
                super::generics::Sequence2::<
                    r#pop::<'i>,
                    0u8,
                    super::generics::Str::<super::wrapper::W4>,
                    1u8,
                >,
            >,
            1u8,
            super::generics::r#eoi,
            1u8,
        >,
        super::generics::Sequence3::<
            r#push::<'i, super::generics::Str::<super::wrapper::W3>>,
            0u8,
            super::generics::Choice3::<
                super::generics::Sequence3::<
                    r#push::<'i, super::generics::Str::<super::wrapper::W4>>,
                    0u8,
                    super::generics::Str::<super::wrapper::W5>,
                    1u8,
                    r#pop::<'i>,
                    1u8,
                >,
                super::generics::Sequence2::<
                    r#drop::<'i>,
                    0u8,
                    super::generics::Str::<super::wrapper::W5>,
                    1u8,
                >,
                super::generics::Sequence2::<
                    r#pop::<'i>,
                    0u8,
                    super::generics::Str::<super::wrapper::W4>,
                    1u8,
                >,
            >,
            1u8,
            super::generics::r#eoi,
            1u8,
        >,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#checkpoint_restore<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#checkpoint_restore<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            let rule = super::Rule::r#checkpoint_restore;
            rule
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `ascii_digits`. Grammar: `pest::ascii_digit+`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#ascii_digits<'i> {
        #[doc = r" Matched structure."]
        pub content: super::generics::RepOnce<super::generics::r#ascii_digit, 0u8>,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#ascii_digits<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#ascii_digits;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#ascii_digits,
        (),
        super::Rule,
        super::Rule::r#ascii_digits,
        super::generics::RepOnce::<super::generics::r#ascii_digit, 0u8>,
        super::generics::RepOnce::<super::generics::r#ascii_digit, 0u8>,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#ascii_digits<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#ascii_digits<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            let rule = super::Rule::r#ascii_digits;
            rule
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `ascii_nonzero_digits`. Grammar: `pest::ascii_nonzero_digit+`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#ascii_nonzero_digits<'i> {
        #[doc = r" Matched structure."]
        pub content: super::generics::RepOnce<super::generics::r#ascii_nonzero_digit, 0u8>,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#ascii_nonzero_digits<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#ascii_nonzero_digits;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#ascii_nonzero_digits,
        (),
        super::Rule,
        super::Rule::r#ascii_nonzero_digits,
        super::generics::RepOnce::<super::generics::r#ascii_nonzero_digit, 0u8>,
        super::generics::RepOnce::<super::generics::r#ascii_nonzero_digit, 0u8>,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#ascii_nonzero_digits<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#ascii_nonzero_digits<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            let rule = super::Rule::r#ascii_nonzero_digits;
            rule
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `ascii_bin_digits`. Grammar: `pest::ascii_bin_digit+`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#ascii_bin_digits<'i> {
        #[doc = r" Matched structure."]
        pub content: super::generics::RepOnce<super::generics::r#ascii_bin_digit, 0u8>,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#ascii_bin_digits<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#ascii_bin_digits;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#ascii_bin_digits,
        (),
        super::Rule,
        super::Rule::r#ascii_bin_digits,
        super::generics::RepOnce::<super::generics::r#ascii_bin_digit, 0u8>,
        super::generics::RepOnce::<super::generics::r#ascii_bin_digit, 0u8>,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#ascii_bin_digits<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#ascii_bin_digits<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            let rule = super::Rule::r#ascii_bin_digits;
            rule
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `ascii_oct_digits`. Grammar: `pest::ascii_oct_digit+`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#ascii_oct_digits<'i> {
        #[doc = r" Matched structure."]
        pub content: super::generics::RepOnce<super::generics::r#ascii_oct_digit, 0u8>,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#ascii_oct_digits<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#ascii_oct_digits;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#ascii_oct_digits,
        (),
        super::Rule,
        super::Rule::r#ascii_oct_digits,
        super::generics::RepOnce::<super::generics::r#ascii_oct_digit, 0u8>,
        super::generics::RepOnce::<super::generics::r#ascii_oct_digit, 0u8>,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#ascii_oct_digits<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#ascii_oct_digits<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            let rule = super::Rule::r#ascii_oct_digits;
            rule
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `ascii_hex_digits`. Grammar: `pest::ascii_hex_digit+`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#ascii_hex_digits<'i> {
        #[doc = r" Matched structure."]
        pub content: super::generics::RepOnce<super::generics::r#ascii_hex_digit, 0u8>,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#ascii_hex_digits<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#ascii_hex_digits;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#ascii_hex_digits,
        (),
        super::Rule,
        super::Rule::r#ascii_hex_digits,
        super::generics::RepOnce::<super::generics::r#ascii_hex_digit, 0u8>,
        super::generics::RepOnce::<super::generics::r#ascii_hex_digit, 0u8>,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#ascii_hex_digits<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#ascii_hex_digits<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            let rule = super::Rule::r#ascii_hex_digits;
            rule
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `ascii_alpha_lowers`. Grammar: `pest::ascii_alpha_lower+`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#ascii_alpha_lowers<'i> {
        #[doc = r" Matched structure."]
        pub content: super::generics::RepOnce<super::generics::r#ascii_alpha_lower, 0u8>,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#ascii_alpha_lowers<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#ascii_alpha_lowers;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#ascii_alpha_lowers,
        (),
        super::Rule,
        super::Rule::r#ascii_alpha_lowers,
        super::generics::RepOnce::<super::generics::r#ascii_alpha_lower, 0u8>,
        super::generics::RepOnce::<super::generics::r#ascii_alpha_lower, 0u8>,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#ascii_alpha_lowers<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#ascii_alpha_lowers<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            let rule = super::Rule::r#ascii_alpha_lowers;
            rule
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `ascii_alpha_uppers`. Grammar: `pest::ascii_alpha_upper+`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#ascii_alpha_uppers<'i> {
        #[doc = r" Matched structure."]
        pub content: super::generics::RepOnce<super::generics::r#ascii_alpha_upper, 0u8>,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#ascii_alpha_uppers<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#ascii_alpha_uppers;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#ascii_alpha_uppers,
        (),
        super::Rule,
        super::Rule::r#ascii_alpha_uppers,
        super::generics::RepOnce::<super::generics::r#ascii_alpha_upper, 0u8>,
        super::generics::RepOnce::<super::generics::r#ascii_alpha_upper, 0u8>,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#ascii_alpha_uppers<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#ascii_alpha_uppers<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            let rule = super::Rule::r#ascii_alpha_uppers;
            rule
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `ascii_alphas`. Grammar: `pest::ascii_alpha+`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#ascii_alphas<'i> {
        #[doc = r" Matched structure."]
        pub content: super::generics::RepOnce<super::generics::r#ascii_alpha, 0u8>,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#ascii_alphas<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#ascii_alphas;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#ascii_alphas,
        (),
        super::Rule,
        super::Rule::r#ascii_alphas,
        super::generics::RepOnce::<super::generics::r#ascii_alpha, 0u8>,
        super::generics::RepOnce::<super::generics::r#ascii_alpha, 0u8>,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#ascii_alphas<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#ascii_alphas<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            let rule = super::Rule::r#ascii_alphas;
            rule
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `ascii_alphanumerics`. Grammar: `pest::ascii_alphanumeric+`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#ascii_alphanumerics<'i> {
        #[doc = r" Matched structure."]
        pub content: super::generics::RepOnce<super::generics::r#ascii_alphanumeric, 0u8>,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#ascii_alphanumerics<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#ascii_alphanumerics;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#ascii_alphanumerics,
        (),
        super::Rule,
        super::Rule::r#ascii_alphanumerics,
        super::generics::RepOnce::<super::generics::r#ascii_alphanumeric, 0u8>,
        super::generics::RepOnce::<super::generics::r#ascii_alphanumeric, 0u8>,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#ascii_alphanumerics<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#ascii_alphanumerics<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            let rule = super::Rule::r#ascii_alphanumerics;
            rule
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `asciis`. Grammar: `pest::ascii+`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#asciis<'i> {
        #[doc = r" Matched structure."]
        pub content: super::generics::RepOnce<super::generics::r#ascii, 0u8>,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#asciis<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#asciis;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#asciis,
        (),
        super::Rule,
        super::Rule::r#asciis,
        super::generics::RepOnce::<super::generics::r#ascii, 0u8>,
        super::generics::RepOnce::<super::generics::r#ascii, 0u8>,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#asciis<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#asciis<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            let rule = super::Rule::r#asciis;
            rule
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `newline`. Grammar: `pest::newline+`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#newline<'i> {
        #[doc = r" Matched structure."]
        pub content: super::generics::RepOnce<super::generics::r#newline, 0u8>,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#newline<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#newline;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#newline,
        (),
        super::Rule,
        super::Rule::r#newline,
        super::generics::RepOnce::<super::generics::r#newline, 0u8>,
        super::generics::RepOnce::<super::generics::r#newline, 0u8>,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#newline<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#newline<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            let rule = super::Rule::r#newline;
            rule
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `unicode`. Grammar: `(pest::unicode::xid_start ~ pest::unicode::xid_continue*)`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#unicode<'i> {
        #[doc = r" Matched structure."]
        pub content: super::generics::Sequence2<
            super::unicode::XID_START,
            0u8,
            super::generics::Rep<super::unicode::XID_CONTINUE, 0u8>,
            1u8,
        >,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#unicode<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#unicode;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#unicode,
        (),
        super::Rule,
        super::Rule::r#unicode,
        super::generics::Sequence2::<
            super::unicode::XID_START,
            0u8,
            super::generics::Rep::<super::unicode::XID_CONTINUE, 0u8>,
            1u8,
        >,
        super::generics::Sequence2::<
            super::unicode::XID_START,
            0u8,
            super::generics::Rep::<super::unicode::XID_CONTINUE, 0u8>,
            1u8,
        >,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#unicode<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#unicode<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            let rule = super::Rule::r#unicode;
            rule
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `han`. Grammar: `pest::unicode::han+`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#han<'i> {
        #[doc = r" Matched structure."]
        pub content: super::generics::RepOnce<super::unicode::HAN, 0u8>,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#han<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#han;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#han,
        (),
        super::Rule,
        super::Rule::r#han,
        super::generics::RepOnce::<super::unicode::HAN, 0u8>,
        super::generics::RepOnce::<super::unicode::HAN, 0u8>,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#han<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#han<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            let rule = super::Rule::r#han;
            rule
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `hangul`. Grammar: `pest::unicode::hangul+`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#hangul<'i> {
        #[doc = r" Matched structure."]
        pub content: super::generics::RepOnce<super::unicode::HANGUL, 0u8>,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#hangul<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#hangul;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#hangul,
        (),
        super::Rule,
        super::Rule::r#hangul,
        super::generics::RepOnce::<super::unicode::HANGUL, 0u8>,
        super::generics::RepOnce::<super::unicode::HANGUL, 0u8>,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#hangul<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#hangul<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            let rule = super::Rule::r#hangul;
            rule
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `hiragana`. Grammar: `pest::unicode::hiragana+`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#hiragana<'i> {
        #[doc = r" Matched structure."]
        pub content: super::generics::RepOnce<super::unicode::HIRAGANA, 0u8>,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#hiragana<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#hiragana;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#hiragana,
        (),
        super::Rule,
        super::Rule::r#hiragana,
        super::generics::RepOnce::<super::unicode::HIRAGANA, 0u8>,
        super::generics::RepOnce::<super::unicode::HIRAGANA, 0u8>,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#hiragana<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#hiragana<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            let rule = super::Rule::r#hiragana;
            rule
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `arabic`. Grammar: `pest::unicode::arabic+`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#arabic<'i> {
        #[doc = r" Matched structure."]
        pub content: super::generics::RepOnce<super::unicode::ARABIC, 0u8>,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#arabic<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#arabic;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#arabic,
        (),
        super::Rule,
        super::Rule::r#arabic,
        super::generics::RepOnce::<super::unicode::ARABIC, 0u8>,
        super::generics::RepOnce::<super::unicode::ARABIC, 0u8>,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#arabic<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#arabic<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            let rule = super::Rule::r#arabic;
            rule
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `emoji`. Grammar: `pest::unicode::emoji+`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#emoji<'i> {
        #[doc = r" Matched structure."]
        pub content: super::generics::RepOnce<super::unicode::EMOJI, 0u8>,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#emoji<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#emoji;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#emoji,
        (),
        super::Rule,
        super::Rule::r#emoji,
        super::generics::RepOnce::<super::unicode::EMOJI, 0u8>,
        super::generics::RepOnce::<super::unicode::EMOJI, 0u8>,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#emoji<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#emoji<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            let rule = super::Rule::r#emoji;
            rule
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `whitespace`. Grammar: `\" \"`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#whitespace<'i> {
        #[doc = r" Matched structure."]
        pub content: super::generics::Str<super::wrapper::W6>,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#whitespace<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#whitespace;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#whitespace,
        (),
        super::Rule,
        super::Rule::r#whitespace,
        super::generics::Str::<super::wrapper::W6>,
        super::generics::Str::<super::wrapper::W6>,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#whitespace<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#whitespace<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            let rule = super::Rule::r#whitespace;
            rule
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `comment`. Grammar: `\"$\"+`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#comment<'i> {
        #[doc = r" Matched structure."]
        pub content: super::generics::RepOnce<super::generics::Str<super::wrapper::W7>, 0u8>,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#comment<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#comment;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#comment,
        (),
        super::Rule,
        super::Rule::r#comment,
        super::generics::RepOnce::<super::generics::Str::<super::wrapper::W7>, 0u8>,
        super::generics::RepOnce::<super::generics::Str::<super::wrapper::W7>, 0u8>,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#comment<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#comment<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            let rule = super::Rule::r#comment;
            rule
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
}
mod wrapper {
    #[doc = "A wrapper for `\"abc\"`."]
    #[derive(Clone, Debug, Hash, PartialEq, Eq)]
    pub struct W0;
    impl ::pest3::typed::wrapper::String for W0 {
        const CONTENT: &'static ::core::primitive::str = "abc";
    }
    #[doc = "A wrapper for `\",\"`."]
    #[derive(Clone, Debug, Hash, PartialEq, Eq)]
    pub struct W1;
    impl ::pest3::typed::wrapper::String for W1 {
        const CONTENT: &'static ::core::primitive::str = ",";
    }
    #[doc = "A wrapper for `\"FAIL\"`."]
    #[derive(Clone, Debug, Hash, PartialEq, Eq)]
    pub struct W2;
    impl ::pest3::typed::wrapper::String for W2 {
        const CONTENT: &'static ::core::primitive::str = "FAIL";
    }
    #[doc = "A wrapper for `\"\"`."]
    #[derive(Clone, Debug, Hash, PartialEq, Eq)]
    pub struct W3;
    impl ::pest3::typed::wrapper::String for W3 {
        const CONTENT: &'static ::core::primitive::str = "";
    }
    #[doc = "A wrapper for `\"a\"`."]
    #[derive(Clone, Debug, Hash, PartialEq, Eq)]
    pub struct W4;
    impl ::pest3::typed::wrapper::String for W4 {
        const CONTENT: &'static ::core::primitive::str = "a";
    }
    #[doc = "A wrapper for `\"b\"`."]
    #[derive(Clone, Debug, Hash, PartialEq, Eq)]
    pub struct W5;
    impl ::pest3::typed::wrapper::String for W5 {
        const CONTENT: &'static ::core::primitive::str = "b";
    }
    #[doc = "A wrapper for `\" \"`."]
    #[derive(Clone, Debug, Hash, PartialEq, Eq)]
    pub struct W6;
    impl ::pest3::typed::wrapper::String for W6 {
        const CONTENT: &'static ::core::primitive::str = " ";
    }
    #[doc = "A wrapper for `\"$\"`."]
    #[derive(Clone, Debug, Hash, PartialEq, Eq)]
    pub struct W7;
    impl ::pest3::typed::wrapper::String for W7 {
        const CONTENT: &'static ::core::primitive::str = "$";
    }
}
pub use pest3::typed::unicode;
#[doc = "Used generics."]
pub mod generics {
    pub use pest3::choice::Choice2;
    pub use pest3::choice::Choice3;
    pub use pest3::sequence::Sequence2;
    pub use pest3::sequence::Sequence3;
    pub use pest3::sequence::Sequence4;
    pub use pest3::sequence::Sequence6;
    pub use pest3::typed::template::{
        CharRange, Insens, Negative, PeekSlice1, PeekSlice2, Positive, Rep, RepMax, RepMin,
        RepMinMax, RepOnce, Str, ANY as any, ASCII as ascii, ASCII_ALPHA as ascii_alpha,
        ASCII_ALPHANUMERIC as ascii_alphanumeric, ASCII_ALPHA_LOWER as ascii_alpha_lower,
        ASCII_ALPHA_UPPER as ascii_alpha_upper, ASCII_BIN_DIGIT as ascii_bin_digit,
        ASCII_DIGIT as ascii_digit, ASCII_HEX_DIGIT as ascii_hex_digit,
        ASCII_NONZERO_DIGIT as ascii_nonzero_digit, ASCII_OCT_DIGIT as ascii_oct_digit,
        DROP as drop, EOI, EOI as eoi, NEWLINE as newline, PEEK as peek, PEEK_ALL as peek_all,
        POP as pop, POP_ALL as pop_all, PUSH as push, SOI, SOI as soi,
    };
}
