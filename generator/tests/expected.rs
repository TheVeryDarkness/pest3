#[doc = "For compatibility."]
#[allow(
    dead_code,
    missing_docs,
    non_camel_case_types,
    clippy::upper_case_acronyms
)]
#[derive(Clone, Copy, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub enum Rule {
    EOI,
    #[doc = "Regular rule."]
    r#Regular,
    #[doc = "Atomic rule."]
    r#Atomic,
    #[doc = "Silent rule."]
    r#NonAtomic,
    r#ExactString,
    r#CharRange,
    r#Any,
    r#Seq,
    r#Choice,
    r#Rep,
    r#RepAtLeastOnce,
    r#Opt,
    r#RepExact,
    r#RepLeft,
    r#RepRight,
    r#RepLeftRight,
    r#Pos,
    r#Neg,
    r#Push,
    r#Pop,
    r#PopAll,
    r#Peek,
    r#PeekUnlimited,
    r#PeekLeft,
    r#PeekRight,
    r#PeekLeftRight,
    r#Drop,
    r#PeekAll,
}
impl ::pest3::typed::RuleType for Rule {
    const EOI: Self = Rule::EOI;
}
#[doc = "Definitions of statically typed nodes generated by pest-generator."]
pub mod rules {
    pub type __OptionalTrivia<'i> = super::generics::Rep<
        super::generics::Str<super::wrapper::W0>,
        ::pest3::typed::template::Empty,
    >;
    pub type __MandatoryTrivia<'i> = super::generics::RepOnce<
        super::generics::Str<super::wrapper::W0>,
        ::pest3::typed::template::Empty,
    >;
    #[doc = "Generated for rule `Regular`. Grammar: `'0'..'9'+`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#Regular<'i> {
        #[doc = r" Matched structure."]
        pub content: super::generics::RepOnce<
            super::generics::CharRange<'0', '9'>,
            ::pest3::typed::template::Empty,
        >,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#Regular<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#Regular;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#Regular,
        (),
        super::Rule,
        super::Rule::r#Regular,
        super::generics::RepOnce::<
            super::generics::CharRange::<'0', '9'>,
            ::pest3::typed::template::Empty,
        >,
        super::generics::RepOnce::<
            super::generics::CharRange::<'0', '9'>,
            ::pest3::typed::template::Empty,
        >,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#Regular<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#Regular<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            super::Rule::r#Regular
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `Atomic`. Grammar: `(CharRange+ ~ (\"+\" ~ CharRange+))`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#Atomic<'i> {
        #[doc = r" Matched structure."]
        pub content: super::generics::Sequence3<
            super::generics::RepOnce<r#CharRange<'i>, ::pest3::typed::template::Empty>,
            ::pest3::typed::template::Empty,
            super::generics::Str<super::wrapper::W1>,
            __OptionalTrivia<'i>,
            super::generics::RepOnce<r#CharRange<'i>, ::pest3::typed::template::Empty>,
            __OptionalTrivia<'i>,
        >,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#Atomic<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#Atomic;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#Atomic,
        (),
        super::Rule,
        super::Rule::r#Atomic,
        super::generics::Sequence3::<
            super::generics::RepOnce::<r#CharRange::<'i>, ::pest3::typed::template::Empty>,
            ::pest3::typed::template::Empty,
            super::generics::Str::<super::wrapper::W1>,
            __OptionalTrivia::<'i>,
            super::generics::RepOnce::<r#CharRange::<'i>, ::pest3::typed::template::Empty>,
            __OptionalTrivia::<'i>,
        >,
        super::generics::Sequence3::<
            super::generics::RepOnce::<r#CharRange::<'i>, ::pest3::typed::template::Empty>,
            ::pest3::typed::template::Empty,
            super::generics::Str::<super::wrapper::W1>,
            __OptionalTrivia::<'i>,
            super::generics::RepOnce::<r#CharRange::<'i>, ::pest3::typed::template::Empty>,
            __OptionalTrivia::<'i>,
        >,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#Atomic<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#Atomic<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            super::Rule::r#Atomic
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `NonAtomic`. Grammar: `(\"(\" ^ \")\")`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#NonAtomic<'i> {
        #[doc = r" Matched structure."]
        pub content: super::generics::Sequence2<
            super::generics::Str<super::wrapper::W2>,
            ::pest3::typed::template::Empty,
            super::generics::Str<super::wrapper::W3>,
            __MandatoryTrivia<'i>,
        >,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#NonAtomic<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#NonAtomic;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#NonAtomic,
        (),
        super::Rule,
        super::Rule::r#NonAtomic,
        super::generics::Sequence2::<
            super::generics::Str::<super::wrapper::W2>,
            ::pest3::typed::template::Empty,
            super::generics::Str::<super::wrapper::W3>,
            __MandatoryTrivia::<'i>,
        >,
        super::generics::Sequence2::<
            super::generics::Str::<super::wrapper::W2>,
            ::pest3::typed::template::Empty,
            super::generics::Str::<super::wrapper::W3>,
            __MandatoryTrivia::<'i>,
        >,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#NonAtomic<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#NonAtomic<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            super::Rule::r#NonAtomic
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `ExactString`. Grammar: `\"r#\"`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#ExactString<'i> {
        #[doc = r" Matched structure."]
        pub content: super::generics::Str<super::wrapper::W4>,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#ExactString<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#ExactString;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#ExactString,
        (),
        super::Rule,
        super::Rule::r#ExactString,
        super::generics::Str::<super::wrapper::W4>,
        super::generics::Str::<super::wrapper::W4>,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#ExactString<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#ExactString<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            super::Rule::r#ExactString
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `CharRange`. Grammar: `'0'..'9'`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#CharRange<'i> {
        #[doc = r" Matched structure."]
        pub content: super::generics::CharRange<'0', '9'>,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#CharRange<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#CharRange;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#CharRange,
        (),
        super::Rule,
        super::Rule::r#CharRange,
        super::generics::CharRange::<'0', '9'>,
        super::generics::CharRange::<'0', '9'>,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#CharRange<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#CharRange<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            super::Rule::r#CharRange
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `Any`. Grammar: `pest::any`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#Any<'i> {
        #[doc = r" Matched structure."]
        pub content: super::generics::r#any,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#Any<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#Any;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#Any,
        (),
        super::Rule,
        super::Rule::r#Any,
        super::generics::r#any,
        super::generics::r#any,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#Any<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#Any<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            super::Rule::r#Any
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `Seq`. Grammar: `(\"1\" ~ ('2'..'9' ~ \".\"))`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#Seq<'i> {
        #[doc = r" Matched structure."]
        pub content: super::generics::Sequence3<
            super::generics::Str<super::wrapper::W5>,
            ::pest3::typed::template::Empty,
            super::generics::CharRange<'2', '9'>,
            __OptionalTrivia<'i>,
            super::generics::Str<super::wrapper::W6>,
            __OptionalTrivia<'i>,
        >,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#Seq<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#Seq;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#Seq,
        (),
        super::Rule,
        super::Rule::r#Seq,
        super::generics::Sequence3::<
            super::generics::Str::<super::wrapper::W5>,
            ::pest3::typed::template::Empty,
            super::generics::CharRange::<'2', '9'>,
            __OptionalTrivia::<'i>,
            super::generics::Str::<super::wrapper::W6>,
            __OptionalTrivia::<'i>,
        >,
        super::generics::Sequence3::<
            super::generics::Str::<super::wrapper::W5>,
            ::pest3::typed::template::Empty,
            super::generics::CharRange::<'2', '9'>,
            __OptionalTrivia::<'i>,
            super::generics::Str::<super::wrapper::W6>,
            __OptionalTrivia::<'i>,
        >,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#Seq<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#Seq<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            super::Rule::r#Seq
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `Choice`. Grammar: `(\"a\" | ((\"b\"+ ~ RepAtLeastOnce) | ((&\"c\" ~ (Choice ~ (Rep ~ Opt))) | (Peek | (PeekLeft | (PeekRight | (PeekLeftRight | (Drop | PeekAll))))))))`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#Choice<'i> {
        #[doc = r" Matched structure."]
        pub content: ::pest3::std::Box<
            super::generics::Choice9<
                super::generics::Str<super::wrapper::W7>,
                super::generics::Sequence2<
                    super::generics::RepOnce<
                        super::generics::Str<super::wrapper::W8>,
                        ::pest3::typed::template::Empty,
                    >,
                    ::pest3::typed::template::Empty,
                    r#RepAtLeastOnce<'i>,
                    __OptionalTrivia<'i>,
                >,
                super::generics::Sequence4<
                    super::generics::Positive<super::generics::Str<super::wrapper::W9>>,
                    ::pest3::typed::template::Empty,
                    r#Choice<'i>,
                    __OptionalTrivia<'i>,
                    r#Rep<'i>,
                    __OptionalTrivia<'i>,
                    r#Opt<'i>,
                    __OptionalTrivia<'i>,
                >,
                r#Peek<'i>,
                r#PeekLeft<'i>,
                r#PeekRight<'i>,
                r#PeekLeftRight<'i>,
                r#Drop<'i>,
                r#PeekAll<'i>,
            >,
        >,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#Choice<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#Choice;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#Choice,
        (),
        super::Rule,
        super::Rule::r#Choice,
        super::generics::Choice9::<
            super::generics::Str::<super::wrapper::W7>,
            super::generics::Sequence2::<
                super::generics::RepOnce::<
                    super::generics::Str::<super::wrapper::W8>,
                    ::pest3::typed::template::Empty,
                >,
                ::pest3::typed::template::Empty,
                r#RepAtLeastOnce::<'i>,
                __OptionalTrivia::<'i>,
            >,
            super::generics::Sequence4::<
                super::generics::Positive::<super::generics::Str::<super::wrapper::W9>>,
                ::pest3::typed::template::Empty,
                r#Choice::<'i>,
                __OptionalTrivia::<'i>,
                r#Rep::<'i>,
                __OptionalTrivia::<'i>,
                r#Opt::<'i>,
                __OptionalTrivia::<'i>,
            >,
            r#Peek::<'i>,
            r#PeekLeft::<'i>,
            r#PeekRight::<'i>,
            r#PeekLeftRight::<'i>,
            r#Drop::<'i>,
            r#PeekAll::<'i>,
        >,
        ::pest3::std::Box<
            super::generics::Choice9::<
                super::generics::Str::<super::wrapper::W7>,
                super::generics::Sequence2::<
                    super::generics::RepOnce::<
                        super::generics::Str::<super::wrapper::W8>,
                        ::pest3::typed::template::Empty,
                    >,
                    ::pest3::typed::template::Empty,
                    r#RepAtLeastOnce::<'i>,
                    __OptionalTrivia::<'i>,
                >,
                super::generics::Sequence4::<
                    super::generics::Positive::<super::generics::Str::<super::wrapper::W9>>,
                    ::pest3::typed::template::Empty,
                    r#Choice::<'i>,
                    __OptionalTrivia::<'i>,
                    r#Rep::<'i>,
                    __OptionalTrivia::<'i>,
                    r#Opt::<'i>,
                    __OptionalTrivia::<'i>,
                >,
                r#Peek::<'i>,
                r#PeekLeft::<'i>,
                r#PeekRight::<'i>,
                r#PeekLeftRight::<'i>,
                r#Drop::<'i>,
                r#PeekAll::<'i>,
            >,
        >,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#Choice<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#Choice<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            super::Rule::r#Choice
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `Rep`. Grammar: `\"b\"*`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#Rep<'i> {
        #[doc = r" Matched structure."]
        pub content: super::generics::Rep<
            super::generics::Str<super::wrapper::W8>,
            ::pest3::typed::template::Empty,
        >,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#Rep<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#Rep;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#Rep,
        (),
        super::Rule,
        super::Rule::r#Rep,
        super::generics::Rep::<
            super::generics::Str::<super::wrapper::W8>,
            ::pest3::typed::template::Empty,
        >,
        super::generics::Rep::<
            super::generics::Str::<super::wrapper::W8>,
            ::pest3::typed::template::Empty,
        >,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#Rep<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#Rep<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            super::Rule::r#Rep
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `RepAtLeastOnce`. Grammar: `'0'..'9'+`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#RepAtLeastOnce<'i> {
        #[doc = r" Matched structure."]
        pub content: super::generics::RepOnce<
            super::generics::CharRange<'0', '9'>,
            ::pest3::typed::template::Empty,
        >,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#RepAtLeastOnce<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#RepAtLeastOnce;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#RepAtLeastOnce,
        (),
        super::Rule,
        super::Rule::r#RepAtLeastOnce,
        super::generics::RepOnce::<
            super::generics::CharRange::<'0', '9'>,
            ::pest3::typed::template::Empty,
        >,
        super::generics::RepOnce::<
            super::generics::CharRange::<'0', '9'>,
            ::pest3::typed::template::Empty,
        >,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#RepAtLeastOnce<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#RepAtLeastOnce<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            super::Rule::r#RepAtLeastOnce
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `Opt`. Grammar: `\"?\"?`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#Opt<'i> {
        #[doc = r" Matched structure."]
        pub content: ::pest3::std::Option<super::generics::Str<super::wrapper::W10>>,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#Opt<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#Opt;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#Opt,
        (),
        super::Rule,
        super::Rule::r#Opt,
        ::pest3::std::Option::<super::generics::Str::<super::wrapper::W10>>,
        ::pest3::std::Option::<super::generics::Str::<super::wrapper::W10>>,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#Opt<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#Opt<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            super::Rule::r#Opt
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `RepExact`. Grammar: `RepAtLeastOnce[3..3]`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#RepExact<'i> {
        #[doc = r" Matched structure."]
        pub content: super::generics::RepMinMax<
            r#RepAtLeastOnce<'i>,
            ::pest3::typed::template::Empty,
            3usize,
            3usize,
        >,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#RepExact<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#RepExact;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#RepExact,
        (),
        super::Rule,
        super::Rule::r#RepExact,
        super::generics::RepMinMax::<
            r#RepAtLeastOnce::<'i>,
            ::pest3::typed::template::Empty,
            3usize,
            3usize,
        >,
        super::generics::RepMinMax::<
            r#RepAtLeastOnce::<'i>,
            ::pest3::typed::template::Empty,
            3usize,
            3usize,
        >,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#RepExact<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#RepExact<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            super::Rule::r#RepExact
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `RepLeft`. Grammar: `RepExact[1..]`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#RepLeft<'i> {
        #[doc = r" Matched structure."]
        pub content:
            super::generics::RepMin<r#RepExact<'i>, ::pest3::typed::template::Empty, 1usize>,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#RepLeft<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#RepLeft;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#RepLeft,
        (),
        super::Rule,
        super::Rule::r#RepLeft,
        super::generics::RepMin::<r#RepExact::<'i>, ::pest3::typed::template::Empty, 1usize>,
        super::generics::RepMin::<r#RepExact::<'i>, ::pest3::typed::template::Empty, 1usize>,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#RepLeft<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#RepLeft<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            super::Rule::r#RepLeft
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `RepRight`. Grammar: `RepLeft[..2]`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#RepRight<'i> {
        #[doc = r" Matched structure."]
        pub content:
            super::generics::RepMax<r#RepLeft<'i>, ::pest3::typed::template::Empty, 2usize>,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#RepRight<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#RepRight;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#RepRight,
        (),
        super::Rule,
        super::Rule::r#RepRight,
        super::generics::RepMax::<r#RepLeft::<'i>, ::pest3::typed::template::Empty, 2usize>,
        super::generics::RepMax::<r#RepLeft::<'i>, ::pest3::typed::template::Empty, 2usize>,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#RepRight<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#RepRight<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            super::Rule::r#RepRight
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `RepLeftRight`. Grammar: `RepRight[1..2]`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#RepLeftRight<'i> {
        #[doc = r" Matched structure."]
        pub content: super::generics::RepMinMax<
            r#RepRight<'i>,
            ::pest3::typed::template::Empty,
            1usize,
            2usize,
        >,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#RepLeftRight<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#RepLeftRight;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#RepLeftRight,
        (),
        super::Rule,
        super::Rule::r#RepLeftRight,
        super::generics::RepMinMax::<
            r#RepRight::<'i>,
            ::pest3::typed::template::Empty,
            1usize,
            2usize,
        >,
        super::generics::RepMinMax::<
            r#RepRight::<'i>,
            ::pest3::typed::template::Empty,
            1usize,
            2usize,
        >,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#RepLeftRight<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#RepLeftRight<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            super::Rule::r#RepLeftRight
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `Pos`. Grammar: `&(pest::SOI ~ RepLeftRight[2..4])`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#Pos<'i> {
        #[doc = r" Matched structure."]
        pub content: super::generics::Positive<
            super::generics::Sequence2<
                super::generics::r#SOI,
                ::pest3::typed::template::Empty,
                super::generics::RepMinMax<
                    r#RepLeftRight<'i>,
                    ::pest3::typed::template::Empty,
                    2usize,
                    4usize,
                >,
                __OptionalTrivia<'i>,
            >,
        >,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#Pos<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#Pos;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#Pos,
        (),
        super::Rule,
        super::Rule::r#Pos,
        super::generics::Positive::<
            super::generics::Sequence2::<
                super::generics::r#SOI,
                ::pest3::typed::template::Empty,
                super::generics::RepMinMax::<
                    r#RepLeftRight::<'i>,
                    ::pest3::typed::template::Empty,
                    2usize,
                    4usize,
                >,
                __OptionalTrivia::<'i>,
            >,
        >,
        super::generics::Positive::<
            super::generics::Sequence2::<
                super::generics::r#SOI,
                ::pest3::typed::template::Empty,
                super::generics::RepMinMax::<
                    r#RepLeftRight::<'i>,
                    ::pest3::typed::template::Empty,
                    2usize,
                    4usize,
                >,
                __OptionalTrivia::<'i>,
            >,
        >,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#Pos<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#Pos<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            super::Rule::r#Pos
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `Neg`. Grammar: `!(pest::EOI ~ Pos)`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#Neg<'i> {
        #[doc = r" Matched structure."]
        pub content: super::generics::Negative<
            super::generics::Sequence2<
                super::generics::r#EOI,
                ::pest3::typed::template::Empty,
                r#Pos<'i>,
                __OptionalTrivia<'i>,
            >,
        >,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#Neg<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#Neg;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#Neg,
        (),
        super::Rule,
        super::Rule::r#Neg,
        super::generics::Negative::<
            super::generics::Sequence2::<
                super::generics::r#EOI,
                ::pest3::typed::template::Empty,
                r#Pos::<'i>,
                __OptionalTrivia::<'i>,
            >,
        >,
        super::generics::Negative::<
            super::generics::Sequence2::<
                super::generics::r#EOI,
                ::pest3::typed::template::Empty,
                r#Pos::<'i>,
                __OptionalTrivia::<'i>,
            >,
        >,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#Neg<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#Neg<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            super::Rule::r#Neg
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `Push`. Grammar: `pest::stack::push((RepLeft* ~ (Neg ~ (ExactString+ ~ (Push ~ (Pop ~ (Push ~ PopAll)))))))`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#Push<'i> {
        #[doc = r" Matched structure."]
        pub content: ::pest3::std::Box<
            super::generics::r#push<
                super::generics::Sequence7<
                    super::generics::Rep<r#RepLeft<'i>, ::pest3::typed::template::Empty>,
                    ::pest3::typed::template::Empty,
                    r#Neg<'i>,
                    __OptionalTrivia<'i>,
                    super::generics::RepOnce<r#ExactString<'i>, ::pest3::typed::template::Empty>,
                    __OptionalTrivia<'i>,
                    r#Push<'i>,
                    __OptionalTrivia<'i>,
                    r#Pop<'i>,
                    __OptionalTrivia<'i>,
                    r#Push<'i>,
                    __OptionalTrivia<'i>,
                    r#PopAll<'i>,
                    __OptionalTrivia<'i>,
                >,
            >,
        >,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#Push<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#Push;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#Push,
        (),
        super::Rule,
        super::Rule::r#Push,
        super::generics::r#push::<
            super::generics::Sequence7::<
                super::generics::Rep::<r#RepLeft::<'i>, ::pest3::typed::template::Empty>,
                ::pest3::typed::template::Empty,
                r#Neg::<'i>,
                __OptionalTrivia::<'i>,
                super::generics::RepOnce::<r#ExactString::<'i>, ::pest3::typed::template::Empty>,
                __OptionalTrivia::<'i>,
                r#Push::<'i>,
                __OptionalTrivia::<'i>,
                r#Pop::<'i>,
                __OptionalTrivia::<'i>,
                r#Push::<'i>,
                __OptionalTrivia::<'i>,
                r#PopAll::<'i>,
                __OptionalTrivia::<'i>,
            >,
        >,
        ::pest3::std::Box<
            super::generics::r#push::<
                super::generics::Sequence7::<
                    super::generics::Rep::<r#RepLeft::<'i>, ::pest3::typed::template::Empty>,
                    ::pest3::typed::template::Empty,
                    r#Neg::<'i>,
                    __OptionalTrivia::<'i>,
                    super::generics::RepOnce::<r#ExactString::<'i>, ::pest3::typed::template::Empty>,
                    __OptionalTrivia::<'i>,
                    r#Push::<'i>,
                    __OptionalTrivia::<'i>,
                    r#Pop::<'i>,
                    __OptionalTrivia::<'i>,
                    r#Push::<'i>,
                    __OptionalTrivia::<'i>,
                    r#PopAll::<'i>,
                    __OptionalTrivia::<'i>,
                >,
            >,
        >,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#Push<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#Push<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            super::Rule::r#Push
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `Pop`. Grammar: `pest::stack::pop`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#Pop<'i> {
        #[doc = r" Matched structure."]
        pub content: super::generics::r#pop<'i>,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#Pop<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#Pop;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#Pop,
        (),
        super::Rule,
        super::Rule::r#Pop,
        super::generics::r#pop::<'i>,
        super::generics::r#pop::<'i>,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#Pop<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#Pop<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            super::Rule::r#Pop
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `PopAll`. Grammar: `pest::stack::pop_all`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#PopAll<'i> {
        #[doc = r" Matched structure."]
        pub content: super::generics::r#pop_all<'i>,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#PopAll<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#PopAll;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#PopAll,
        (),
        super::Rule,
        super::Rule::r#PopAll,
        super::generics::r#pop_all::<'i>,
        super::generics::r#pop_all::<'i>,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#PopAll<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#PopAll<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            super::Rule::r#PopAll
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `Peek`. Grammar: `pest::stack::peek`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#Peek<'i> {
        #[doc = r" Matched structure."]
        pub content: super::generics::r#peek<'i>,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#Peek<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#Peek;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#Peek,
        (),
        super::Rule,
        super::Rule::r#Peek,
        super::generics::r#peek::<'i>,
        super::generics::r#peek::<'i>,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#Peek<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#Peek<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            super::Rule::r#Peek
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `PeekUnlimited`. Grammar: `pest::stack::peek[..]`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#PeekUnlimited<'i> {
        #[doc = r" Matched structure."]
        pub content: super::generics::PeekSlice1<0isize>,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#PeekUnlimited<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#PeekUnlimited;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#PeekUnlimited,
        (),
        super::Rule,
        super::Rule::r#PeekUnlimited,
        super::generics::PeekSlice1::<0isize>,
        super::generics::PeekSlice1::<0isize>,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#PeekUnlimited<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#PeekUnlimited<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            super::Rule::r#PeekUnlimited
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `PeekLeft`. Grammar: `pest::stack::peek[1..]`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#PeekLeft<'i> {
        #[doc = r" Matched structure."]
        pub content: super::generics::PeekSlice1<1isize>,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#PeekLeft<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#PeekLeft;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#PeekLeft,
        (),
        super::Rule,
        super::Rule::r#PeekLeft,
        super::generics::PeekSlice1::<1isize>,
        super::generics::PeekSlice1::<1isize>,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#PeekLeft<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#PeekLeft<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            super::Rule::r#PeekLeft
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `PeekRight`. Grammar: `pest::stack::peek[..]`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#PeekRight<'i> {
        #[doc = r" Matched structure."]
        pub content: super::generics::PeekSlice1<0isize>,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#PeekRight<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#PeekRight;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#PeekRight,
        (),
        super::Rule,
        super::Rule::r#PeekRight,
        super::generics::PeekSlice1::<0isize>,
        super::generics::PeekSlice1::<0isize>,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#PeekRight<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#PeekRight<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            super::Rule::r#PeekRight
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `PeekLeftRight`. Grammar: `pest::stack::peek[1..2]`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#PeekLeftRight<'i> {
        #[doc = r" Matched structure."]
        pub content: super::generics::PeekSlice2<1isize, 2isize>,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#PeekLeftRight<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#PeekLeftRight;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#PeekLeftRight,
        (),
        super::Rule,
        super::Rule::r#PeekLeftRight,
        super::generics::PeekSlice2::<1isize, 2isize>,
        super::generics::PeekSlice2::<1isize, 2isize>,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#PeekLeftRight<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#PeekLeftRight<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            super::Rule::r#PeekLeftRight
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `Drop`. Grammar: `pest::stack::drop`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#Drop<'i> {
        #[doc = r" Matched structure."]
        pub content: super::generics::r#drop,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#Drop<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#Drop;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#Drop,
        (),
        super::Rule,
        super::Rule::r#Drop,
        super::generics::r#drop,
        super::generics::r#drop,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#Drop<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#Drop<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            super::Rule::r#Drop
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
    #[doc = "Generated for rule `PeekAll`. Grammar: `pest::stack::peek_all`."]
    #[derive(Clone, Debug, Eq, PartialEq)]
    #[allow(non_camel_case_types)]
    pub struct r#PeekAll<'i> {
        #[doc = r" Matched structure."]
        pub content: super::generics::r#peek_all<'i>,
        #[doc = r" Matched span."]
        pub span: ::pest3::Span<'i>,
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::wrapper::Rule for r#PeekAll<'i> {
        type Rule = super::Rule;
        const RULE: super::Rule = super::Rule::r#PeekAll;
    }
    #[allow(unused_imports)]
    use pest3::typed::SubRule as _;
    ::pest3::full_rule_struct!(
        r#PeekAll,
        (),
        super::Rule,
        super::Rule::r#PeekAll,
        super::generics::r#peek_all::<'i>,
        super::generics::r#peek_all::<'i>,
    );
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairContainer<super::Rule> for r#PeekAll<'i> {
        fn for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            self.content.for_self_or_for_each_child_pair(f)
        }
        fn for_self_or_for_each_child_pair(
            &self,
            f: &mut impl ::pest3::std::FnMut(::pest3::token::Pair<super::Rule>),
        ) {
            use pest3::typed::PairTree;
            f(self.as_pair_tree())
        }
    }
    #[allow(non_camel_case_types)]
    impl<'i> ::pest3::typed::PairTree<super::Rule> for r#PeekAll<'i> {
        fn get_rule() -> super::Rule {
            #[allow(unused_imports)]
            use pest3::typed::SubRule as _;
            super::Rule::r#PeekAll
        }
        fn get_span(&self) -> (::pest3::std::usize, ::pest3::std::usize) {
            (self.span.start(), self.span.end())
        }
    }
}
mod wrapper {
    #[doc = "A wrapper for `\" \"`."]
    #[derive(Clone, Debug, Hash, PartialEq, Eq)]
    pub struct W0;
    impl ::pest3::typed::wrapper::String for W0 {
        const CONTENT: &'static ::core::primitive::str = " ";
    }
    #[doc = "A wrapper for `\"+\"`."]
    #[derive(Clone, Debug, Hash, PartialEq, Eq)]
    pub struct W1;
    impl ::pest3::typed::wrapper::String for W1 {
        const CONTENT: &'static ::core::primitive::str = "+";
    }
    #[doc = "A wrapper for `\"(\"`."]
    #[derive(Clone, Debug, Hash, PartialEq, Eq)]
    pub struct W2;
    impl ::pest3::typed::wrapper::String for W2 {
        const CONTENT: &'static ::core::primitive::str = "(";
    }
    #[doc = "A wrapper for `\")\"`."]
    #[derive(Clone, Debug, Hash, PartialEq, Eq)]
    pub struct W3;
    impl ::pest3::typed::wrapper::String for W3 {
        const CONTENT: &'static ::core::primitive::str = ")";
    }
    #[doc = "A wrapper for `\"r#\"`."]
    #[derive(Clone, Debug, Hash, PartialEq, Eq)]
    pub struct W4;
    impl ::pest3::typed::wrapper::String for W4 {
        const CONTENT: &'static ::core::primitive::str = "r#";
    }
    #[doc = "A wrapper for `\"1\"`."]
    #[derive(Clone, Debug, Hash, PartialEq, Eq)]
    pub struct W5;
    impl ::pest3::typed::wrapper::String for W5 {
        const CONTENT: &'static ::core::primitive::str = "1";
    }
    #[doc = "A wrapper for `\".\"`."]
    #[derive(Clone, Debug, Hash, PartialEq, Eq)]
    pub struct W6;
    impl ::pest3::typed::wrapper::String for W6 {
        const CONTENT: &'static ::core::primitive::str = ".";
    }
    #[doc = "A wrapper for `\"a\"`."]
    #[derive(Clone, Debug, Hash, PartialEq, Eq)]
    pub struct W7;
    impl ::pest3::typed::wrapper::String for W7 {
        const CONTENT: &'static ::core::primitive::str = "a";
    }
    #[doc = "A wrapper for `\"b\"`."]
    #[derive(Clone, Debug, Hash, PartialEq, Eq)]
    pub struct W8;
    impl ::pest3::typed::wrapper::String for W8 {
        const CONTENT: &'static ::core::primitive::str = "b";
    }
    #[doc = "A wrapper for `\"c\"`."]
    #[derive(Clone, Debug, Hash, PartialEq, Eq)]
    pub struct W9;
    impl ::pest3::typed::wrapper::String for W9 {
        const CONTENT: &'static ::core::primitive::str = "c";
    }
    #[doc = "A wrapper for `\"?\"`."]
    #[derive(Clone, Debug, Hash, PartialEq, Eq)]
    pub struct W10;
    impl ::pest3::typed::wrapper::String for W10 {
        const CONTENT: &'static ::core::primitive::str = "?";
    }
}
pub use pest3::typed::unicode;
#[doc = "Used generics."]
pub mod generics {
    pub use pest3::choice::Choice9;
    pub use pest3::sequence::Sequence2;
    pub use pest3::sequence::Sequence3;
    pub use pest3::sequence::Sequence4;
    pub use pest3::sequence::Sequence7;
    pub use pest3::typed::template::{
        CharRange, Insens, Negative, PeekSlice1, PeekSlice2, Positive, Rep, RepMax, RepMin,
        RepMinMax, RepOnce, Str, ANY as any, ASCII as ascii, ASCII_ALPHA as ascii_alpha,
        ASCII_ALPHANUMERIC as ascii_alphanumeric, ASCII_ALPHA_LOWER as ascii_alpha_lower,
        ASCII_ALPHA_UPPER as ascii_alpha_upper, ASCII_BIN_DIGIT as ascii_bin_digit,
        ASCII_DIGIT as ascii_digit, ASCII_HEX_DIGIT as ascii_hex_digit,
        ASCII_NONZERO_DIGIT as ascii_nonzero_digit, ASCII_OCT_DIGIT as ascii_oct_digit,
        DROP as drop, EOI, EOI as eoi, NEWLINE as newline, PEEK as peek, PEEK_ALL as peek_all,
        POP as pop, POP_ALL as pop_all, PUSH as push, SOI, SOI as soi,
    };
}
